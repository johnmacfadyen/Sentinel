// Based on https://github.com/Azure/Azure-Sentinel/blob/master/Parsers/NGINX/NGINXHTTPServer.txt
// Modified to use Nginx Proxy Manager log format.
// Usage Instruction :
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias as NGINXHTTPServer.
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. NGINXHTTPServer | take 10).
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
let LogRegEx = @'(\[[^\]]*]) - ([0-9]+) ([0-9]+) - ([a-zA-Z]+) ([a-zA-Z]+) ([a-zA-Z]+(\.[a-zA-Z]+)+) "([^"]*)" \[Client (\b(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))\b)] \[Length ([0-9]+)] \[Gzip -] \[Sent-to (([0-9+(\.[0-9]+)+)] "([^"]*)" "([^"]*)"';
let nginx_accesslog_events =() {
NGINX_CL
| where RawData matches regex LogRegEx
| extend EventProduct = 'NGINX Proxy Manager'
| extend EventType = 'AccessLog'
| extend SrcIpAddr = extract(LogRegEx, 9, RawData)
| extend EventStartTime = todatetime(replace(@'\/', @'-', replace(@'(\d{2}\/\w{3}\/\d{4}):(\d{2}\:\d{2}\:\d{2})', @'\1 \2', extract(@'\[(.*?)\+\d+\]', 1, RawData))))
| extend HttpRequestMethod = extract(LogRegEx, 4, RawData)
| extend Host = extract(LogRegEx, 6, RawData)
| extend UrlOriginal = extract(LogRegEx, 8, RawData)
| extend Upstream = extract(LogRegEx, 13, RawData)
| extend Scheme = extract(LogRegEx, 5, RawData)
| extend HttpStatusCode = extract(LogRegEx, 3, RawData)
| extend HttpStatusCodeCache = extract(LogRegEx, 2, RawData)
| extend HttpResponseBodyBytes = extract(LogRegEx, 11, RawData)
| extend HttpReferrerOriginal = extract(LogRegEx, 15, RawData)
| extend HttpUserAgentOriginal = extract(LogRegEx, 14, RawData)
};
let FallBackLogRegEx = @'(\[[^\]]*]) ([0-9]+) - ([a-zA-Z]+|-) ([a-zA-Z]+) (.*) "([^"]*)" \[Client (\b(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))\b)] \[Length ([0-9]+)] \[Gzip .*] "([^"]*)" "([^"]*)"';
let nginx_fallbackaccesslog_events =() {
NGINX_CL
| where RawData matches regex FallBackLogRegEx
| extend EventProduct = 'NGINX Proxy Manager'
| extend EventType = 'AccessLog'
| extend SrcIpAddr = extract(FallBackLogRegEx, 7, RawData)
| extend EventStartTime = todatetime(replace(@'\/', @'-', replace(@'(\d{2}\/\w{3}\/\d{4}):(\d{2}\:\d{2}\:\d{2})', @'\1 \2', extract(@'\[(.*?)\+\d+\]', 1, RawData))))
| extend HttpRequestMethod = extract(FallBackLogRegEx, 3, RawData)
| extend Host = extract(FallBackLogRegEx, 5, RawData)
| extend UrlOriginal = extract(FallBackLogRegEx, 6, RawData)
| extend Scheme = extract(FallBackLogRegEx, 4, RawData)
| extend HttpStatusCode = extract(FallBackLogRegEx, 2, RawData)
| extend HttpResponseBodyBytes = extract(FallBackLogRegEx, 9, RawData)
| extend HttpReferrerOriginal = extract(FallBackLogRegEx, 11, RawData)
| extend HttpUserAgentOriginal = extract(FallBackLogRegEx, 10, RawData)
};
let nginx_errorlog_events=() {
NGINX_CL
| where RawData matches regex @'\A\d{4}\/\d{2}\/\d{2}\s+\d{2}\:\d{2}\:\d{2}\s+\[.*?\]\s\d+\#\d+\:'
| extend EventProduct = 'NGINX Proxy Manager'
| extend EventType = 'ErrorLog'
| extend EventType = 'ErrorLog'
| extend EventSeverity = extract(@'\[(.*?)\]', 1, RawData)
| extend EventStartTime = todatetime(replace(@'\/', '-', extract(@'\A(.*?)\s\[', 1, RawData)))
| extend SrcIpAddr = extract(@'client: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, RawData)
| extend ProcessId = extract(@'\]\s(\d+)\#', 1, RawData)
| extend ThreadId = extract(@'\]\s\d+\#(\d+)\:', 1, RawData)
| extend EventMessage = extract(@'\d+\#\d+\:\s(.*)', 1, RawData)
};
union isfuzzy=true nginx_accesslog_events, nginx_fallbackaccesslog_events, nginx_errorlog_events
| project TimeGenerated
        , EventProduct
        , EventType
        , EventSeverity
        , EventStartTime
        , SrcIpAddr
        , HttpRequestMethod
        , Host
        , UrlOriginal
        , Upstream
        , Scheme
        , HttpStatusCode
        , HttpStatusCodeCache
        , HttpResponseBodyBytes
        , HttpReferrerOriginal
        , HttpUserAgentOriginal
        , ProcessId
        , ThreadId
        , EventMessage