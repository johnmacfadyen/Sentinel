// Based on https://github.com/Azure/Azure-Sentinel/blob/master/Parsers/Apache/ApacheHTTPServer.txt
// This function parses Apache HTTP server access.log and error.log
// Expected access.log format: "%v %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\""
// Expected error.log format: "[%t] [%l] [client %a] %M"
// Usage Instruction : 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias as ApacheHTTPServer.
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. ApacheHTTPServer | take 10).
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
let LogRegEx = @'([a-zA-Z]+(\.[a-zA-Z]+)+):(\d{1,3}) (.*) (.*) (.*) (\[.*\]\s)\"(GET|POST).*?\"\s([1-5][0-9]{2})\s(\d+)\s\"(.*?)\"\s\"(.*?)\".*';
let apache_accesslog_events =() {
ApacheHTTPServer_CL
| where RawData matches regex LogRegEx
| extend EventProduct = 'Apache'
| extend EventType = 'AccessLog'
| extend EventData = split(RawData, '"')
| extend SubEventData0 = split(trim_start(@' ', (trim_end(@' ', tostring(EventData[0])))), ' ')
| extend SubEventData1 = split(EventData[1], ' ')
| extend SubEventData2 = split(trim_start(@' ', (trim_end(@' ', tostring(EventData[2])))), ' ')
| extend Host = extract(LogRegEx, 1, RawData)
| extend SrcIpAddr = tostring(SubEventData0[1])
| extend ClientIdentity = tostring(SubEventData0[2])
| extend SrcUserName = tostring(SubEventData0[3])
| extend EventStartTime = todatetime(replace(@'\/', @'-', replace(@'(\d{2}\/\w{3}\/\d{4}):(\d{2}\:\d{2}\:\d{2})', @'\1 \2', extract(@'\[(.*?)\+\d+\]', 1, RawData))))
//| extend EventStartTime = strcat(SubEventData0[3], SubEventData0[4])
| extend HttpRequestMethod = tostring(SubEventData1[0])
| extend UrlOriginal = tostring(SubEventData1[1])
| extend HttpVersion = tostring(SubEventData1[2])
| extend HttpStatusCode = tostring(SubEventData2[0])
| extend HttpResponseBodyBytes = tostring(SubEventData2[1])
| extend HttpReferrerOriginal = tostring(EventData[3])
| extend HttpUserAgentOriginal = tostring(EventData[5])
};
let apache_errorlog_events=() {
ApacheHTTPServer_CL
| where RawData matches regex @'\A\[.*?\]\s\[.*\]\s\[.*\].*'
| extend EventProduct = 'Apache'
| extend EventType = 'ErrorLog'
| extend EventSeverity = 'Error'
| extend EventStartTime = todatetime(extract(@'\[\w{3}\s(.*?)\]', 1, RawData))
| extend SrcIpAddr = extract(@'\[client (.*):(.*)\]', 1, RawData)
| extend EventMessage = extract(@'\[client (.*):(.*)\]\s(.*)', 3, RawData)
| extend EventModule = extract(@'\[\w{3}\s(.*?)\] \[(.*):(.*)\] \[pid (.*)]', 2, RawData)
| extend EventErrorLevel = extract(@'\[\w{3}\s(.*?)\] \[(.*):(.*)\] \[pid (.*)]', 3, RawData)
| extend EventPID = extract(@'\[\w{3}\s(.*?)\] \[(.*):(.*)\] \[pid (.*)] \[client (.*):(.*)\]\s(.*)', 4, RawData)
};
union isfuzzy=true apache_accesslog_events, apache_errorlog_events
| project TimeGenerated
        , EventProduct
        , EventType
        , EventSeverity
        , EventStartTime
        , Host
        , SrcIpAddr
//        , ClientIdentity
//        , SrcUserName
        , HttpRequestMethod
        , UrlOriginal
        , HttpVersion
        , HttpStatusCode
        , HttpResponseBodyBytes
        , HttpReferrerOriginal
        , HttpUserAgentOriginal
        , EventMessage
        , EventModule
        , EventErrorLevel
//        , EventPID